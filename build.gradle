import java.text.SimpleDateFormat

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.moowork.node' version '1.1.1'
    id 'nebula.ospackage' version '4.3.0'
    id 'org.ajoberstar.grgit' version '1.6.0'
}

apply plugin: 'java'

def mainClass = 'eu.m6r.kicker.Main'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

dependencies {
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.25.1',
            'org.glassfish.jersey.media:jersey-media-moxy:2.25.1'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.8.Final'
    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.193'
    // https://mvnrepository.com/artifact/javax.websocket/javax.websocket-client-api
    compile group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1'
    compile 'org.glassfish.tyrus:tyrus-client:1.1'
    // https://mvnrepository.com/artifact/org.glassfish.tyrus/tyrus-container-grizzly-client
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.13.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.7'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
}

node {
    download = true
}

task installFrontend(type: NpmTask) {
    args = ['--prefix', 'frontend', 'install']
}

task cleanFrontend(type: Delete, dependsOn: installFrontend) {
    delete 'build/resources/main/www'
}

task buildFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'build']
}

task buildProductionFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'buildProduction']
}

task copyFrontend(type: Copy) {
    from 'frontend/www'
    into 'build/resources/main/www'
}

copyFrontend.shouldRunAfter buildFrontend, buildProductionFrontend

task buildApp(dependsOn: [shadowJar, copyFrontend])

task runApp(type: JavaExec, dependsOn: [buildFrontend, buildApp]) {
    classpath = files('build/libs/kicker-all.jar')
    main = mainClass
    standardInput = System.in
}

task debianizeApp(type: Deb, dependsOn: [buildProductionFrontend, buildApp]) {
    def df = new SimpleDateFormat("yyyyMMdd'T'HHmmss")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))

    packageName = 'kicker'
    version = "${df.format(new Date())}.git${grgit.head().abbreviatedId}"

    preUninstall file('src/main/debian/preUninstall.sh')
    preInstall file('src/main/debian/preInstall.sh')
    postInstall file('src/main/debian/postInstall.sh')

    into '/opt/kicker'

    from('build/libs/kicker-all.jar') {
        into 'lib'
        user 'kicker'
    }

    from('src/main/debian/conf') {
        into 'conf'
        user 'kicker'
    }

    from('src/main/debian/upstart/kicker') {
        into '/etc/init.d'
        fileMode 0755
    }
}

