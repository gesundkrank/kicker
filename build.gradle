buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.8.3'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: 'docker-compose'

group = "eu.m6r.kicker"
mainClassName = 'eu.m6r.kicker.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27',
            'org.glassfish.jersey.media:jersey-media-moxy:2.27',
            'org.glassfish.jersey.inject:jersey-hk2:2.27'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.13.Final'
    // https://mvnrepository.com/artifact/javax.websocket/javax.websocket-client-api
    compile group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1'
    compile 'org.glassfish.tyrus:tyrus-client:1.1'
    // https://mvnrepository.com/artifact/org.glassfish.tyrus/tyrus-container-grizzly-client
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.13.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile 'org.apache.logging.log4j:log4j-1.2-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'de.gesundkrank.jskills', name: 'jskills', version: '1.1'
    // https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper
    compile group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.4.11'
    // https://mvnrepository.com/artifact/com.google.zxing/core
    compile group: 'com.google.zxing', name: 'core', version: '3.3.3'

}

node {
    download = true
    version = '10.8.0'
}

shadowJar {
    baseName = 'kicker'
    classifier = null
}

task tslint(type: NpmTask) {
    args = ['--prefix', 'frontend', 'run-script', 'tslint']
}

task installFrontend(type: NpmTask) {
    args = ['--prefix', 'frontend', 'install']
}

task cleanFrontend(type: Delete, dependsOn: installFrontend) {
    delete 'build/resources/main/www'
    delete 'frontend/www'
}

task buildFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'build']
}

task buildProductionFrontend(type: NpmTask, dependsOn: [cleanFrontend, tslint]) {
    args = ['--prefix', 'frontend', 'run', 'buildProduction']
}

task copyFrontend(type: Copy) {
    from 'frontend/www'
    into 'build/resources/main/www'
}

copyFrontend.shouldRunAfter buildFrontend, buildProductionFrontend

task buildApp(dependsOn: [shadowJar, copyFrontend])

task buildDocker(type: Docker, dependsOn: [buildProductionFrontend, buildApp]) {
    baseImage = 'openjdk:8'
    push = project.hasProperty('push')
    tag = project.findProperty('repository') ?: 'kicker'
    tagVersion = project.findProperty('tag')
    addFile {
        from('build/libs/kicker.jar')
    }
    entryPoint(['java', '-jar', '/kicker.jar'])
    exposePort(8080)
}

task dockerTest(type: Docker, dependsOn: [buildFrontend, buildApp]) {
    baseImage = 'openjdk:8'
    tag = 'kicker'

    setEnvironment('DOCKERIZE_VERSION', 'v0.6.1')
    runCommand('wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz ' +
                '    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz ' +
                '    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz')
    entryPoint([ 'dockerize', '-wait', 'tcp://postgres:5432','java', '-Dorg.jboss.logging.provider=log4j2', '-jar', '/kicker.jar'])
    exposePort(8080)

    addFile {
        from('build/libs/kicker.jar')
        from('kicker.properties')
    }
}

composeUp.dependsOn(dockerTest)
