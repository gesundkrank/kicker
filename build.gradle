buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "se.transmode.gradle:gradle-docker:1.2" // <- Here
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.moowork.node' version '1.1.1'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'docker'

group = "eu.m6r.kicker"
mainClassName = 'eu.m6r.kicker.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.25.1',
            'org.glassfish.jersey.media:jersey-media-moxy:2.25.1'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.8.Final'
    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.193'
    // https://mvnrepository.com/artifact/javax.websocket/javax.websocket-client-api
    compile group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1'
    compile 'org.glassfish.tyrus:tyrus-client:1.1'
    // https://mvnrepository.com/artifact/org.glassfish.tyrus/tyrus-container-grizzly-client
    compile group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client', version: '1.13.1'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.7'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    compile group: 'de.gesundkrank.jskills', name: 'jskills', version: '1.0'
}

node {
    download = true
}

task installFrontend(type: NpmTask) {
    args = ['--prefix', 'frontend', 'install']
}

task cleanFrontend(type: Delete, dependsOn: installFrontend) {
    delete 'build/resources/main/www'
}

task buildFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'build']
}

task buildProductionFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'buildProduction']
}

task copyFrontend(type: Copy) {
    from 'frontend/www'
    into 'build/resources/main/www'
}

copyFrontend.shouldRunAfter buildFrontend, buildProductionFrontend

task buildApp(dependsOn: [shadowJar, copyFrontend])

task runApp(type: JavaExec, dependsOn: [buildFrontend, buildApp]) {
    classpath = files('build/libs/kicker-all.jar')
    main = mainClassName
    standardInput = System.in
}

task buildDocker(type: Docker) {
    baseImage = 'openjdk:8'
    push = project.hasProperty('push')
    tag = '867503539023.dkr.ecr.eu-west-1.amazonaws.com/kicker'
    addFile {
        from ('build/libs/kicker-all.jar')
    }
    entryPoint(['java', '-jar', '/kicker-all.jar'])
    exposePort(8080)
}

buildDocker.dependsOn(buildProductionFrontend, buildApp)

